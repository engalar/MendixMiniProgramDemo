// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package wechatwidget.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public class JA_WX_PaySign extends CustomJavaAction<java.lang.String>
{
	private java.lang.String PrivateKeyStr;
	private java.lang.String HttpMethod;
	private java.lang.String JSONBody;
	private java.lang.String URLPath;
	private java.lang.String Timestamp;
	private java.lang.String Nonce;

	public JA_WX_PaySign(IContext context, java.lang.String PrivateKeyStr, java.lang.String HttpMethod, java.lang.String JSONBody, java.lang.String URLPath, java.lang.String Timestamp, java.lang.String Nonce)
	{
		super(context);
		this.PrivateKeyStr = PrivateKeyStr;
		this.HttpMethod = HttpMethod;
		this.JSONBody = JSONBody;
		this.URLPath = URLPath;
		this.Timestamp = Timestamp;
		this.Nonce = Nonce;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		String StringBody = "";
		StringBody += HttpMethod + "\n" + URLPath + "\n" + Timestamp + "\n" + Nonce + "\n" + JSONBody + "\n";
		return sign(StringBody.getBytes(StandardCharsets.UTF_8), PrivateKeyStr);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_WX_PaySign";
	}

	// BEGIN EXTRA CODE

	private String sign(byte[] message, String keyString) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException, InvalidKeyException, SignatureException {
		Signature sign = Signature.getInstance("SHA256withRSA");
		PrivateKey privateKey = encodePrivateKey(keyString);
		sign.initSign(privateKey);
		sign.update(message);

		return Base64.getEncoder().encodeToString(sign.sign());
	}

	private PrivateKey encodePrivateKey(String keyStr){
		try{
			// Remove the "BEGIN" and "END" lines, as well as any whitespace
			String privateKey = keyStr.replace("-----BEGIN PRIVATE KEY-----", "")
					.replace("-----END PRIVATE KEY-----", "")
					.replaceAll("\\s+","");

			KeyFactory kf = KeyFactory.getInstance("RSA");
			return kf.generatePrivate(
					new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKey))
			);
		}catch (NoSuchAlgorithmException e){
			throw new RuntimeException("RSA not supported");
		}catch (InvalidKeySpecException e){
			throw new RuntimeException("private key invalid");
		}
	}
	// END EXTRA CODE
}
