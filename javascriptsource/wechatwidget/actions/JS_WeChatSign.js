// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";
import CryptoJs from 'crypto-js'

// BEGIN EXTRA CODE

const url = location.href.split('#')[0];

const generateNonceStr = () => {
  return Math.random().toString(36).substr(2, 15);
}

const generateTimestamp = () => {
  return parseInt(new Date().getTime() / 1000) + '';
}

const raw = (args) => {
  let keys = Object.keys(args);
  keys = keys.sort();
  let newArgs = {};
  keys.forEach(function (key) {
    newArgs[key.toLowerCase()] = args[key];
  });
  
  let string = '';
  for (let k in newArgs) {
    string += '&' + k + '=' + newArgs[k];
  }
  string = string.substr(1);
  return string;
}


const sign = (jsapi_ticket) => {
  let ret = {
    jsapi_ticket: jsapi_ticket,
    nonceStr: generateNonceStr(),
    timestamp: generateTimestamp(),
    url
  };
  let string = raw(ret);
  let sha1 = CryptoJs.SHA1(string).toString();
  ret.signature = sha1;
  ret.rawString = string;
  return ret;
}


const createMXSignature = async (ret) =>{
  return new Promise((resolve, reject) => {
    mx.data.create({
      entity: "WeChatWidget.WxSign",
      callback: function (mxObject) {
        const{signature, nonceStr, timestamp, rawString} = ret;
        mxObject.set(signature, signature);
        mxObject.set(nonceStr, nonceStr);
        mxObject.set(timestamp, timestamp);
        mxObject.set(url, rawString);
        resolve(mxObject);
      },
      error: function (err) {
        console.log(err);
        reject(null)
      }
    });
  })
}

// END EXTRA CODE

/**
 * @param {string} jsticket
 * @returns {Promise.<string>}
 */
export async function JS_WeChatSign(jsticket) {
	// BEGIN USER CODE

  const signature = sign(jsticket);
  return JSON.stringify(signature);
  // const mxObject = await createMXSignature(signature);
  // return mxObject
	// END USER CODE
}
